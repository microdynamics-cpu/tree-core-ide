<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>fileTypes</key>
    <array>
      <string>S</string>
      <string>s</string>
      <string>riscv</string>
      <string>asm</string>
    </array>
    <key>keyEquivalent</key>
    <string>^~M</string>
    <key>name</key>
    <string>RISCV Assembler</string>
    <key>patterns</key>
    <array>

      <dict>
        <key>comment</key>
        <string>ok actually this are instructions, but one also could call them funtionsâ€¦</string>
        <key>match</key>
        <string>\b(la|lb|lh|lw|ld|nop|li|mv|not|neg|negw|sext\.w|seqz|snez|sltz|sgtz|beqz|bnez|blez|bgez|bltz|bgtz|bgt|ble|bgtu|bleu|j|jal|jr|ret|call|tail|fence|csr[r|w|s|c]|csr[w|s|c]i)\b</string>
        <key>name</key>
        <string>support.function.pseudo.riscv</string>
      </dict>

      <dict>
        <key>match</key>
        <string>\b(add|addw|auipc|lui|jalr|beq|bne|blt|bge|bltu|bgeu|lb|lh|lw|ld|lbu|lhu|sb|sh|sw|sd|addi|addiw|slti|sltiu|xori|ori|andi|slli|slliw|srli|srliw|srai|sraiw|sub|subw|sll|sllw|slt|sltu|xor|srl|srlw|sra|sraw|or|and|fence|fence\.i|csrrw|csrrs|csrrc|csrrwi|csrrsi|csrrci)\b</string>
        <key>name</key>
        <string>support.function.riscv</string>
      </dict>

      <dict>
        <key>comment</key>
        <string>priviledged instructions</string>
        <key>match</key>
        <string>\b(ecall|ebreak|sfence\.vma|mret|sret|uret|wfi)\b</string>
        <key>name</key>
        <string>support.function.riscv.privileged</string>
      </dict>

      <dict>
        <key>comment</key>
        <string>M extension (multiplication and division)</string>
        <key>match</key>
        <string>\b(mul|mulh|mulhsu|mulhu|div|divu|rem|remu|mulw|divw|divuw|remw|remuw)\b</string>
        <key>name</key>
        <string>support.function.riscv.m</string>
      </dict>

      <dict>
        <key>comment</key>
        <string>C extension (compressed instructions)</string>
        <key>match</key>
        <string>\b(c\.addi4spn|c\.fld|c\.lq|c\.lw|c\.flw|c\.ld|c\.fsd|c\.sq|c\.sw|c\.fsw|c\.sd|c\.nop|c\.addi|c\.jal|c\.addiw|c\.li|c\.addi16sp|c\.lui|c\.srli|c\.srli64|c\.srai|c\.srai64|c\.andi|c\.sub|c\.xor|c\.or|c\.and|c\.subw|c\.addw|c\.j|c\.beqz|c\.bnez)\b</string>
        <key>name</key>
        <string>support.function.riscv.c</string>
      </dict>

      <dict>
        <key>comment</key>
        <string>A extension (atomic instructions)</string>
        <key>match</key>
        <string>\b(lr\.[w|d]|sc\.[w|d]|amoswap\.[w|d]|amoadd\.[w|d]|amoxor\.[w|d]|amoand\.[w|d]|amoor\.[w|d]|amomin\.[w|d]|amomax\.[w|d]|amominu\.[w|d]|amomaxu\.[w|d])\b</string>
        <key>name</key>
        <string>support.function.riscv.a</string>
      </dict>

      <dict>
        <key>comment</key>
        <string>F extension (single precision floating point)</string>
        <key>match</key>
        <string>\b(flw|fsw|fmadd\.s|fmsub\.s|fnmsub\.s|fnmadd\.s|fadd\.s|fsub\.s|fmul\.s|fdiv\.s|fsqrt\.s|fsgnj\.s|fsgnjn\.s|fsgnjx\.s|fmin\.s|fmax\.s|fcvt\.w\.s|fcvt\.wu\.s|fmv\.x\.w|feq\.s|flt\.s|fle\.s|fclass\.s|fcvt\.s\.w|fcvt\.s\.wu|fmv\.w\.x|fcvt\.l\.s|fcvt\.lu\.s|fcvt\.s\.l|fcvt\.s\.lu)\b</string>
        <key>name</key>
        <string>support.function.riscv.f</string>
      </dict>

      <dict>
        <key>comment</key>
        <string>D extension (double precision floating point)</string>
        <key>match</key>
        <string>\b(fld|fsd|fmadd\.d|fmsub\.d|fnmsub\.d|fnmadd\.d|fadd\.d|fsub\.d|fmul\.d|fdiv\.d|fsqrt\.d|fsgnj\.d|fsgnjn\.d|fsgnjx\.d|fmin\.d|fmax\.d|fcvt\.s\.d|fcvt\.d\.s|feq\.d|flt\.d|fle\.d|fclass\.d|fcvt\.w\.d|fcvt\.wu\.d|fcvt\.d\.w|fcvt\.d\.wu|fcvt\.l\.d|fcvt\.lu\.d|fmv\.x\.d|fcvt\.d\.l|fcvt\.d\.lu|fmv\.d\.x)\b</string>
        <key>name</key>
        <string>support.function.riscv.d</string>
      </dict>

      <dict>
        <key>match</key>
        <string>\.(skip|ascii|asciiz|byte|[2|4|8]byte|data|double|float|half|kdata|ktext|space|text|word|dword|dtprelword|dtpreldword|set\s*(noat|at)|[s|u]leb128|string|incbin|zero|rodata|comm|common)\b</string>
        <key>name</key>
        <string>storage.type.riscv</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\.(balign|align|p2align|extern|globl|global|local|pushsection|section|bss|insn|option|type|equ|macro|endm|file|ident)\b</string>
        <key>name</key>
        <string>storage.modifier.riscv</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.label.riscv</string>
          </dict>
        </dict>
        <key>match</key>
        <string>\b([A-Za-z0-9_]+):</string>
        <key>name</key>
        <string>meta.function.label.riscv</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.riscv</string>
          </dict>
        </dict>
        <key>match</key>
        <string>\b(x([0-9]|1[0-9]|2[0-9]|3[0-1]))\b</string>
        <key>name</key>
        <string>variable.other.register.usable.by-number.riscv</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.riscv</string>
          </dict>
        </dict>
        <key>match</key>
        <string>\b(zero|ra|sp|gp|tp|t[0-6]|a[0-7]|s[0-9]|fp|s1[0-1])\b</string>
        <key>name</key>
        <string>variable.other.register.usable.by-name.riscv</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.riscv</string>
          </dict>
        </dict>
        <key>match</key>
        <string>\b(([umsh]|vs)status|([umsh]|vs)ie|([ums]|vs)tvec|([ums]|vs)scratch|([ums]|vs)epc|([ums]|vs)cause|([umsh]|vs)tval|([umsh]|vs)ip|fflags|frm|fcsr|m?cycleh?|timeh?|m?instreth?|m?hpmcounter([3-9]|[12][0-9]|3[01])h?|[msh][ei]deleg|[msh]counteren|v?satp|hgeie|hgeip|[hm]tinst|hvip|hgatp|htimedeltah?|mvendorid|marchid|mimpid|mhartid|misa|mstatush|mtval2|pmpcfg[0-3]|pmpaddr([0-9]|1[0-5])|mcountinhibit|mhpmevent([3-9]|[12][0-9]|3[01])|tselect|tdata[1-3]|dcsr|dpc|dscratch[0-1])\b</string>
        <key>name</key>
        <string>variable.other.csr.names.riscv</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.riscv</string>
          </dict>
        </dict>
        <key>match</key>
        <string>\bf([0-9]|1[0-9]|2[0-9]|3[0-1])\b</string>
        <key>name</key>
        <string>variable.other.register.usable.floating-point.riscv</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\b\d+\.\d+\b</string>
        <key>name</key>
        <string>constant.numeric.float.riscv</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\b(\d+|0(x|X)[a-fA-F0-9]+)\b</string>
        <key>name</key>
        <string>constant.numeric.integer.riscv</string>
      </dict>
      <dict>
        <key>begin</key>
        <string>"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.riscv</string>
          </dict>
        </dict>
        <key>end</key>
        <string>"</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.riscv</string>
          </dict>
        </dict>
        <key>name</key>
        <string>string.quoted.double.riscv</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\\[rnt\\"]</string>
            <key>name</key>
            <string>constant.character.escape.riscv</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>begin</key>
        <string>'</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.riscv</string>
          </dict>
        </dict>
        <key>end</key>
        <string>'</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.riscv</string>
          </dict>
        </dict>
        <key>name</key>
        <string>string.quoted.single.riscv</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\\[rnt\\"]</string>
            <key>name</key>
            <string>constant.character.escape.riscv</string>
          </dict>
        </array>
      </dict>

      <!-- multiline command -->
      <dict>
        <key>begin</key>
        <string>\/\*</string>
        <key>end</key>
        <string>\*\/</string>
        <key>name</key>
        <string>comment.block</string>
      </dict>

      <!-- single command -->
      <dict>
        <key>begin</key>
        <string>\/\/</string>
        <key>end</key>
        <string>\n</string>
        <key>name</key>
        <string>comment.line.double-slash</string>
      </dict>
      <!-- preprocessors from C, borrowed from https://github.com/kodLite/cppStartingKit/blob/master/C%2B%2B.tmLanguage -->
      <dict>
        <key>begin</key>
        <string>(?x)
          ^\s*\#\s*(define)\s+             # define
          ((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
          (?:                              # and optionally:
          (\()                         # an open parenthesis
          (
          \s* \g&lt;id&gt; \s*       # first argument
          ((,) \s* \g&lt;id&gt; \s*)*  # additional arguments
          (?:\.\.\.)?          # varargs ellipsis?
          )
          (\))                         # a close parenthesis
          )?
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.define.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.preprocessor.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.c</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>variable.parameter.preprocessor.c</string>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.parameters.c</string>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|$</string>
        <key>name</key>
        <string>meta.preprocessor.macro.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <!-- Meta Preprocessor Diagnostic - C -->
      <dict>
        <key>begin</key>
        <string>^\s*#\s*(error|warning)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.error.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$</string>
        <key>name</key>
        <string>meta.preprocessor.diagnostic.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
        </array>
      </dict>
      <!-- Meta Preprocessor Include - C -->
      <dict>
        <key>begin</key>
        <string>^\s*#\s*(include|import)\b\s+</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.include.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|$</string>
        <key>name</key>
        <string>meta.preprocessor.c.include</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.include.c</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>&lt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>&gt;</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.other.lt-gt.include.c</string>
          </dict>
        </array>
      </dict>
      <!-- Meta Preprocessor - C -->
      <dict>
        <key>begin</key>
        <string>^\s*#\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef|endif)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|$</string>
        <key>name</key>
        <string>meta.preprocessor.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>begin</key>
        <string>(^[ \t]+)?(?=#)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.whitespace.comment.leading.riscv</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?!\G)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>#|(\/\/)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.riscv</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\n</string>
            <key>name</key>
            <string>comment.line.number-sign.riscv</string>
          </dict>
        </array>
      </dict>
    </array>
    <key>scopeName</key>
    <string>source.riscv-asm</string>
    <key>uuid</key>
    <string>003223C7-B8D1-4B7F-BF91-5E0062B19B53</string>
  </dict>
</plist>
